from operator import attrgetter
from Bio import SeqIO
from primer import Primer
from Bio import pairwise2
from Bio.pairwise2 import format_alignment
import regex
import alignmentIO

IUPACbases = [ 'A', 'C', 'G', 'T', 'M', 'R', 'W', 'S', 'Y', 'K', 'V', 'H', 'D', 'B', 'N' ]
basePairs = [ a + b for a in IUPACbases for b in IUPACbases ]
codes = 'AMRWMRWVHDVHDNNMCSYMVHSYBVHNBNRSGKVRDSBKVNDBNWYKTHDWBYKNHDBNMMVHMVHVHNVHNNNRVRDVRDVNDVNDNNWHDWHDWNHDNHDNNVSSBVVNSBBVNNBNHYBYHNHBYBNHNBNDBKKNDDBBKNNDBNVVVNVVNVNNVNNNNHHNHHNHNHNNHNNNDNDDNDDNNDNNDNNNBBBNNNBBBNNNBNNNNNNNNNNNNNNNN'
AmbiqDict = dict( zip( basePairs, codes ) )

# Biopython has a real complicated way of parsing fastas, so this collects just the sequences in a list. Maybe could
# extend to return a dict maintaining sequence IDs.
def generateSequenceList( fastaFile ):
    with open( fastaFile, "r" ) as sequencesFile:
        sequences = SeqIO.parse( sequencesFile, "fasta" )
        sequenceList = [str(sequence.seq) for sequence in sequences]
    return sequenceList

# Iterates through a list of sequences and calculates all kmers. Should extend to collect a range of ks.
def calculateKmers( sequences, k ):
    print( "Calculating {}-mers".format( k ) )
    kmerDict = dict()

    for sequence in sequences:
        for i in range( 0, len( sequence ) - k + 1 ):
            currentMer = str( sequence[i:i+k] )

            if currentMer in kmerDict:
                kmerDict[currentMer] += 1
            else:
                kmerDict[currentMer] = 1

    # Remove entries which are just ambiguous bp.
    del( kmerDict["N"*k] )

    print( "{} {}-mers found".format( len( kmerDict ), k ) )
    return kmerDict

# Converts Kmers to a Primer object which is a nice data structure.
def covertKmerToPrimers( kmers ):
    print( "Converting kmers to primers and calculating characteristics")
    returnList = list()

    primerIDCounter = 1

    for kmer in kmers.keys():
        returnList.append( Primer( kmer, kmers[kmer], primerIDCounter ) )
        primerIDCounter += 1

    return returnList

# Primers with Tms outside the range specified are removed.
def filterPrimersTm( primers, lowTm, highTm ):
    returnList = [ primer for primer in primers if lowTm < primer.Tm < highTm ]
    print( "{} primers removed by Tm requirements".format( len( primers ) - len( returnList ) ) )
    return returnList

def alignPrimers( primers, sequence, mmAllowed ):
    print( "Aligning primers to sequence.")
    alignmentDict = dict()
    for primer in primers:
        re = '({}){{s<={}}}'.format( primer.sequence, mmAllowed )
        search = regex.search( re, sequence )
        if search is not None:
            index = search.span()[0]
            if index in alignmentDict:
                alignmentDict[index].append( primer )
            else:
                alignmentDict[index] = [primer]

    print( "{} unique primer locations found.".format( len( alignmentDict ) ) )
    return alignmentDict

def collapsePrimers( primers ):
    occurences = 0
    for primer in primers:
        occurences += primer.occurrence


#inputFile = "/Users/natem/Documents/Sequences/LassaV_L_Sierra_Leone.fasta"
#seqList = generateSequenceList( inputFile )
#outputDict = calculateKmers( seqList, 19 )
#
## Convert collected Kmers to Primers and sort based on occurance. Reverse is important for collapsing primers later.
#primerList = covertKmerToPrimers( outputDict )
#primerList.sort( key=attrgetter( "occurrence" ), reverse=True )
#
#primerList = filterPrimersTm( primerList, 63, 67 )
#temp = alignPrimers( primerList, seqList[1], 2 )
#
#for key in temp.keys():
#    print( "{},{},{}".format( key, ",".join( p.sequence for p in temp[key] ), ",".join( str( p.occurrence ) for p in temp[key] ) ) )

#testPrimer = Primer( "ACATCATTGGGCCCASSTT", 20, 1 )
#testSequence = "GGGATCCTAGGCAATTTGGTTGTTCTTTCTGAGGTTTTGTGCGCTGAACTTCTCTAAATGGGAAACAAGCAAGCCAAAGCCCCGGAAGCAAAAGACAGTCCGAGAGCCAGCCTGATCCCAGATGCCACACACCTAGGGCCACAGTTTTGCAAGAGCTGCTGGTTCGAAACCAAGGGCCTGGTTGAGTGCAACAACCACTATCTATGTCTCAATTGCCTCACTTTACTTCTAAGTGTCAGCAATAGGTGCCCCATTTGCAAGATGCCCCTTCCCACAAAACTGAGACCGTCAGCCACTCCAACGGCACCCCCAACCGAAGCTGCGGACAGCATCGGACCCCCACCCTACAGTCCCTGAATCCCCACCGACTCCCACCACCCTCACCTCCCCCCGACACCCCCCGGGGGGACCCCCCGCCGGGGGCCCCCCCGGGGGAGCCAACCATCTCCAAAGGGCTACTCAATGTCCTCGATGCATTCATCTTTCCCAGTCAGCTCCTCACATGTTCTGCCCTTCAGTCTCAATTTGCCACTGCTTGACTGTACCATCACCTTCCCCTTTGACTTACTATAACAGAGAGCATAACCCTTGAATTCCACCCAGTTGTCCACCGCCTCAAGAACCGCACTCAAGATCCCCTCACAACTCGGCGTTGCAGCCCTCAACGTGGAGACAATGTCCACCCCTGACCACTGCATCCTCAACCCCAGCCTGTCTATCATCATATTACTCAATGCCTCAATCAGCAGGTCAGATGAAGTGTCCCCAACCTCTCTCACAAATACCTCTAGATCCTGGTCTTGTATAACAGGTGTGAAGGATGCCAATTTCTTTCCACATTCCCACAAGCCTCCCCTATGCACAACCAGAGGGGCTGGTTCAGTGCAGGGACCCACCAATACAAAATCATACTCCGTAAACTGCAACCTTTCCATGTCAACAACAATTTCAACAGGGGTCACATGCCCTAGTTGATTTGTGTCAATTAAAAACTCATTGACAATCTCGGTGTCAACATACCATGCTGATTTGCCCTTAAAAGTAGGTCCTGACAAAACCAGTCTCCAGCAGTCTGACAAAACACACGGACTCACTGCACCTGAGTACATAACGGATACATCATGTACTAAGTACTTAGCCTGTTGATTTATTGAGCCAACATACTCAAGGTGGATGGCAAAGCTTTCCTTAAAACTTGCATCTTGACTTTTAATACGGAACCTCACTGTCTGACTCAATTTCGCAGACCCTGGAGGTAGTGAAGCTACAGCATCAAAGAAATCCTCCATTGAGTTAAACTTAGAATCAACTAAACCTGATGCAATCAATTGATTTTGATTGAATTTAGCTGGCTCAATGTCAAAGTCTATCCAAGCATAACCCATCATCAGGTCATGCTTAAACATAGGCCTTTCAACACCTTTGTGAATAACTTTCTCTACAAATGATGAAAATGGCCCCATTCTATGCAACCCTTCACCCTCTGGAACTGATGTCTTGTGTGGAAACCACGTGAAGGACCCCAATGTTCTTGTAGTCGCAACAAATGGTCTCACATAAGATTCAAAATAAATTTGCCTCATGAAATTGTCTACAGCGTCATTAGTGCTCACCACTCTTTCCTCCACCATGGGTTCATGTGTCCTGCTGTGAGACAACCTCAATTCAGACGATAATACAATGTAATGTTCCTCTCTTTTCCATTTTACTATGTGTGAGACAAGAGACAAGGCTTCACAATTAACATCCAATGCTACACAGAGATCTAGAAATTTTATTCTGGGTGACCACTTCATTTTGGTTGATGCTAAATCGCTCATAAATGGTAATATGTGTTTCTCAAACACTGATGGGTACAGCCTCCTCAAGGAATGAATGATGTGATTCAAACCAACCCTATCCTCCAATAACTTTGATGCAGTTGGCTTCAAGGGAAAATAGTCACAAGGGTTGTGCTTAAAAAAATCCAACGCCTTAACTGTCTTAGGTTCCCCCAAGACCCATGCACCCAGTTCTATTGCAGTTGATAAGGAGATGCACATGTAATCCCATAACAAGGGCCTAAAATAACTGACCACACTTTCACTTCCACTTCCGTTTCTAAGTTCTAGTGGAACTTGCCAATATTGAATGCCATTAGAGTTTGTCAACAATCTGATTCCCTTGACATCAGAAATCAGAGACTGAATGGACTTGATATACAGATTCTCCTTATTTGGTCCTCGAACACATTTGCTACCAAGTGTTCTGCATAACCCCACAAAGCCAGATGCAATGGAACTTTGGAATGCAGATTTGTTGATGGCCTCAGACAGCAGTTTCTGCGCACCTCGAGTGAAAGTGGAAGACAATTTGTTTTGGATTGTTCTGACAATGGTGGGGATCTTTTCATCATCTAGGTTCACAGCACCTGAATATATTATCTTTTGTCTCAACACCATTCTTAAAGGGTGATGCGCAGCCAAGTTTAACCAAGAATACTCAAGGTCAGACTCGGATGGGGGCTCAACATCCAACAGCTCACAAAGATTTCTTAGTGAAGAGAGGTGCTCACTAGACAAATAGTTTGTCGTAAACTCTTCATGGAGCTGCCCAGTCTTCAACCTATTGTATAGCTTTCTTAGCATAGATCTAATCTTGCTGCAAGCATTAGGAATCAACCCCTCTATTTGCCTCATAATTCTATAACTACGGTTGCCATCTACCCAGTCTCTGACATCTGTCTCGCAATTCAATAAGAATGGGTCAATGGGGTATCTTGCATATTGCAAAAGACTTAAGGTTCTTTTCTGTATTAAATTGCACAGGTGAACAGGGACACCATTCGCGACCGACTGATCAATGATTGTGTCAATTGTTTCTGCCAACTGGTGTGGCTCTTTGCACTTTATATTATGAAGAGCTGCTGCAACGAACTTTGTTAATAATGGTACCTCATCTCCCCAAACAAAAAATCTAGACTTAAATTCTGCAACAAACCTACCAATGACACTCTTAGGGCTCACAAACTTATTAAGTTGGTCACTCATATAATAGTGGAATTCCATCAGAGTCCTAAATTCTTCTGGGTCTCTTTGCAAAAGCTCTGTGAGAGATTGATCAAAGAGAGAAATTTGGTCATCACTAGAGGTATAAGCATCTATCGTACCACCACATATGCAACTGATAGCATAATTGATGAACCTCTCTGAAATGAGGGCATAAAAATCTGATGTATTGTGTAATATTCCTTGACCCATGTCAAGTATTGAACTGATGTGAGAAGGCACTACTCCAACTTGGAAATTAGAGTAAAAGAAATCTTCTGTTATTGACTGTTGGGTTTTCTTCCTTAACCCTAGTTGGGCTTTAATGAAAGACTTCATCATAGCTGTCACCACATTAAAAGGTATTTCTACCATTTTGTGCATATGCCACATAAGTAGGGTTGAAAGATAGTCCCTCCCTTTTATGTCAGCTTGCAAGTCCTTTGAGAGAAATATTAAATTCTGTAAGACAGCCAAGAATAAAAATGGACACATCATTGGGCCCCACTTACTATGATCCATGCTATAAGAGACATGTGCCAGTGAAACATTCAATTTCATGGAAAGGATAGCATTTTCAAATTCCTTCTCATTGTTCAGGCAACTCCCTGACAATTGTAGGCTTATAGCTTCAAAGTAATCTTCTATAAGTCTAGTGAACATCTTTGTTCTAAGATCACCAATATATAATTCTCTGTTACCACCCACCTGTTCTTTATATGACAAAGAAAACTTGAGCCTTCCTGTATCAGGCCCCACTGAGTCATAAGATTGTGGCGACTCTTGGCTATAAAAACACAAGTTTTTCAACATTGCTGTGGTACAGTTTGTCAGTGACAGAGCCTTACTAAGTGCCTCTGAGTTGCTCTCCCTTTCACTAATTCTCACATCATCAGAGAGCTTGCCCATATCAAACTTGAAGTTGAGGTTCCTTGACTTATAATGAGTGTACCTCCCCATAAGTGTATTCGCATTCATGATCAAGAGTATAGACTTAAAACACTGAAAGTATTCATGACTAATGTATGTCCTTGTTGACACTGCCTTTGTCAACTCTCCAATGGGACATTGTGACATATGTCCACAGTAAAAATACTTCTCCTTCAACCTACTATTCTCATAGACAGCATTACAGAATTCTTCATAAAATTCACCCGGCAAGATATCATAATCAAAGTCTTCAACCATGTGATTGGATAATTCAGCTTTAATCAACCTAATGTAAAACTTATTTGATACAATCTCATCTAGATCATTTATTGATGGCTGACCATCACCATTGGGGCCTGAGCCCAGCTTGACAGGTTCCCTATACTGATCAACAATTTTTTCAACAGTTTCCTTTAGCTGATCAAAATAATCGCTTGCACCCCCATCGAGCAGGATTTCGTCTAGGTCAGCCTCATTGGCATCACTTTTGTTCTGTCCAGATCCCAGAACCAGATTGCTCATTGCCTGCTGTACTTTGTATTCATAGTCCTGCTTGTTGAGAAGGTACTTTCCCTTTCTTGAGAAGACTTCAGTAAGCTGAGACACGGCCAGTGCTGTGAGCTTATTGAAGTCATAGTTTAACATTCTAGAACCATCTGTGTATTTATTGACAACAACACTCTTGTTACTGGCTAGGTCTAAGGCTGTGGCACAGCCACTGGTGATGAGAGGATCTTTTATTTCTCTTTTTACTTCCTTCTCCTTAAATAGTGAGCCATTGTTAAAAGAGGACGTCAGGAGAGATAAATACTTCTTTGAGACACCAGGCTTTTTATAGTCTGGTCCCTCAACACTTGTGCATCCATCTTTACTTAAAAATTTTTTTGCATTGTAGACCATGTCATCCAGTTCCTCCTCAGTGGCTATGTCTGCAGGATTAGTGCTCACATGACCAAATCTCACTTTTGGTTCCAGAAACTTTTCAAAACATTTTATCTGATCTGTCAGTCTATCTGGTGTTTCCTTCGTGATGAAATGGCACATGTAAGAAATATTCAAAATAAACTTAAATCTATTAGTCATCATGCTCTTCACATCCTCANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCAAGGAACTCAACATCAGTAATTAATTCTTCCTTTATTTTGTCAATAAGGTCCTTATGGTGATAATCTGACACATAAGCCATTACAAAGTACCTAAGATTTTGGAGAAGCTTTTGAGAACGTTTACTAGGGTGAGCTAAAATTAAAACCAGGACCATCTTTGTCAGAGATCTGATATTGTTCAACTGCCCTTCCAGCTCACTGCAATCTTCTATCCAAGATATCATAGTATTTACTGTTGTTTGTAAAACCTCAGCTGAAAATATTGCTGGAAAATATCTTTTAGGATCAGCATAAAATGAGCACACCTCACCAACTTTGTTATCATTAATTGCATAGCACTTCGAGCACTCCCCTGTCTTTTGATAAATCAATTGAAACACAGTATGACCCAATGAAAACTCTTGACAATATGCTTCTTTGCATCTGACCACTTGATACCTTGCAGGACCAAATTCATTCTGTCTCAACTTTACGGTCGATGAGGTTTTCATGGAGTTCACCAAAGCGAGGCTCAATGAAGAAAGCCTCTCTAAGTCAATGGTTCCCAGCAGTTCCACATCCCCCATCACATAAGGGAATGTTTCTTCCTCTACTCTCTGATAACTGATTGTAGGGACAACTCCAGAGACGTCAAAATCCATAATCAAATCATAACTGTTAAGGCAAATCACCTCCATATCAATCTTGTAGTGGTCAACACTGATCCCAACATCCTTTAAAGCAGTAGTGGCCTTTGAAATGGTTTTCTGGAATATTGAATTGAGAATTTGGTTCTTACTCAGGCACTGGGAGGACTGTGTGATTCTAGACCTCTCAGCCTGTTGCCTCCGCTCAACCCATTTTCTGAGATCCCTTTTTGTTGACTCCAAAGAAACTAGTCTATCATTAACACTTATGAAGCAAGACCCCAACCACCCTTTTAAACAATTTTGTTTCATTAAGTCATGTTTACTTGCAAGGAGGATTAGTGCGTCAAAAATTAATAGAAGTTTCCTCCTTGTGTTCAATATCCTCAAAGATTTTACTTTATTTAGGAATGATCTCCAACATTGCACCTGACATTCTCCAGTAGCTTGGGTTTCCCCTTTCTCATTCCCCTCACCAACATTAGCATACAAGAATCTCAAAATTGGCGATGCTCTCTTGAACTGATAAATTAAGTGTTCGATATTGTCTTCTGCAGCTACCTTATCAGCGTACAAATTATTAAGTTCATTAAGTAACTGGCTCTTGTTAACCTTTAAAAACTGACCTTCTATCTCACCTTTCCTCAGTCTGTTCCTAAATACTTGATACTCCTCTTCGATCTGTAGCTTTACTTCATGGGCTGTTAACTTATTGTTGATGCCTTGGTGGCATGAGGCAATCACCTCCTCATAATGATTGGAGCGATTGTCCATCAGAACATTTAAACTCTCCACCCCTGATAGTCTACCTGAAGTCATAGATAAAGATTCACAGAGTCTGCTATACTCTGACTCTTCAAAAAGTGTATTGCTCTCCTGCGCATACTTCAAAAGTGAGAAGAGAGTATCCCTCAGCTTATCATTGACCCAGTCAGGTATTTGTTCATTGTAGAATGATGTTCTCCCGTCTATTAGTGGTATTAAATTGATATCGACACTCTTCAAGTCTTCTTTCAGCTGCTCCAATTTTTTGAAGTCCTCAATGTATTTCTGCTCAAAGTTAGCAGGAGATGACCTAACAAAACACTCCAGCAGTATTAGAACATTGCCCGTCAATTTATAACCGTCCGGTACCACAAAACATAGTGAAGGAGTCAAAATTCCATGGTCATGGAGAATTCTTTCCACAGATTTGTCCTCACTGTTATGTTCACAACCATTTGCGTTACAAGAATCAACCTCAATGCAGAGGGACAGGAGTTTCAACCCTTCCATTAATAGCATCCTGGGCTCTGTCTGCACAAGAAATGCCAACTTCTGTCTTGATAATCTCTCGTTGTTCACTAGGTACTTTGATACTAAGTCTTTGACACAGGCTATGTCTTCCTCCATGTTTGGCTGTTAGTATGATGGTCAGAACCCTCAGAACATGTGGTCTGCTGGAGTAACAGCTCACTTTAAGACAAGGTCCCGTAGGAGGCACAGAAGTAACAAGAGGTAATTAAAGACAATTAAATTAGATAGCCTTAATGCCTAGGATCCTCGGTG"
#
#search = regex.search( '(ACATCATTGGGCCCASSTT){s<=1}', testSequence )
#print( search is None )

#file = "/Users/natem/Documents/Sequences/LassaL_Sierra_Leone_Alignment.fasta"
file = "/Users/natem/Documents/Sequences/LassaL_Sierra_Leone_Alignment_test.fasta"
shit = alignmentIO.parseAlignment( file )

print( shit[0].raw[:25] )
print( shit[0].raw[-25:] )
print( shit[0].sequenceMap )

#for count, sequence in enumerate( shit, 1 ):
#    print( "{}, {}, {},\t{} ...".format( count, sequence.seqID, sequence.name, sequence.raw[:25] ) )